From a37649bd80075dfbd42fd292ab447c05cb4fb12d Mon Sep 17 00:00:00 2001
From: Xubao Jiang <xubaoj@codeaurora.org>
Date: Wed, 14 Aug 2019 10:49:46 +0800
Subject: [PATCH 1/2] Enable gpt-utils for LV

To build gpt-utils for Linux platform, below functions are modified.
1. BOOT_DEV_DIR is set to "/dev/disk/by-partlabel"
2. Update gpt_utils_is_ufs_device() to check /proc/cmdline, as property may be
   not supported.
3. Update get_dev_path_from_partition_name() to get right /dev/sdx path.
4. Update set_boot_lun() and Add get_scsi_node_from_scsidir() to support switch
   ufs boot lun on Linux platform
5. Update CMDLINE_LEN size to 4096.

Change-Id: I76b91d6757ce00e884b4cd2dc6da53408e1517d9
Signed-off-by: Xubao Jiang <xubaoj@codeaurora.org>
Signed-off-by: Nan Zhang <nanzha@codeaurora.org>
---
 oem-recovery/gpt-utils.cpp | 174 ++++++++++++++++++++++++++++++++++++++++-----
 oem-recovery/gpt-utils.h   |   2 +-
 2 files changed, 159 insertions(+), 17 deletions(-)

diff --git a/oem-recovery/gpt-utils.cpp b/oem-recovery/gpt-utils.cpp
index 9eece5c..3cadb22 100644
--- a/oem-recovery/gpt-utils.cpp
+++ b/oem-recovery/gpt-utils.cpp
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2013,2016, The Linux Foundation. All rights reserved.
+ * Copyright (c) 2013,2016,2018-2019 The Linux Foundation. All rights reserved.
  *
  * Redistribution and use in source and binary forms, with or without
  * modification, are permitted provided that the following conditions are
@@ -72,25 +72,35 @@
 /* list the names of the backed-up partitions to be swapped */
 /* extension used for the backup partitions - tzbak, abootbak, etc. */
 #define BAK_PTN_NAME_EXT    "bak"
-#define XBL_PRIMARY         "/dev/block/bootdevice/by-name/xbl"
-#define XBL_BACKUP          "/dev/block/bootdevice/by-name/xblbak"
-#define XBL_AB_PRIMARY      "/dev/block/bootdevice/by-name/xbl_a"
-#define XBL_AB_SECONDARY    "/dev/block/bootdevice/by-name/xbl_b"
+#define XBL_PRIMARY         "/dev/disk/by-partlabel/xbl"
+#define XBL_BACKUP          "/dev/disk/by-partlabel/xblbak"
+#define XBL_AB_PRIMARY      "/dev/disk/by-partlabel/xbl_a"
+#define XBL_AB_SECONDARY    "/dev/disk/by-partlabel/xbl_b"
 /* GPT defines */
 #define MAX_LUNS                    26
 //Size of the buffer that needs to be passed to the UFS ioctl
 #define UFS_ATTR_DATA_SIZE          32
 //This will allow us to get the root lun path from the path to the partition.
-//i.e: from /dev/block/sdaXXX get /dev/block/sda. The assumption here is that
+//i.e: from /dev/sdaXXX get /dev/sda. The assumption here is that
 //the boot critical luns lie between sda to sdz which is acceptable because
 //only user added external disks,etc would lie beyond that limit which do not
 //contain partitions that interest us here.
-#define PATH_TRUNCATE_LOC (sizeof("/dev/block/sda") - 1)
+#define PATH_TRUNCATE_LOC (sizeof("/dev/sda") - 1)
+
+//From /dev/sda get just sda
+#define LUN_NAME_START_LOC (sizeof("/dev/") - 1)
 
-//From /dev/block/sda get just sda
-#define LUN_NAME_START_LOC (sizeof("/dev/block/") - 1)
 #define BOOT_LUN_A_ID 1
 #define BOOT_LUN_B_ID 2
+
+#define KERNEL_CMDLINE       ("/proc/cmdline")
+#define CMDLINE_LEN          (4096)
+#define CMDLINE_BOOT_DEV    "androidboot.bootdevice="
+#define SLOT_SUFFIX_STRLEN   (sizeof("androidboot.slot_suffix=_") - sizeof(char))
+#define SCSI_NODE_SDB    "/sys/block/sdb/device/scsi_generic"
+#define SCSI_NODE_SDC    "/sys/block/sdc/device/scsi_generic"
+
+
 /******************************************************************************
  * MACROS
  ******************************************************************************/
@@ -614,6 +624,55 @@ error:
         return -1;
 }
 
+int get_scsi_node_from_scsidir(const char *sg_dir_path,
+                char *sg_node_path,
+                size_t buf_size)
+{
+        DIR *scsi_dir = NULL;
+        struct dirent *de;
+        int node_found = 0;
+        if (!sg_dir_path || !sg_node_path) {
+                fprintf(stderr, "%s : invalid argument\n",
+                                 __func__);
+                goto error;
+        }
+        
+        scsi_dir = opendir(sg_dir_path);
+        if (!scsi_dir) {
+                fprintf(stderr, "%s : Failed to open %s(%s)\n",
+                                __func__,
+                                sg_dir_path,
+                                strerror(errno));
+                goto error;
+        }
+        while((de = readdir(scsi_dir))) {
+                if (de->d_name[0] == '.')
+                        continue;
+                else if (!strncmp(de->d_name, "sg", 2)) {
+                          snprintf(sg_node_path,
+                                        buf_size -1,
+                                        "/dev/%s",
+                                        de->d_name);
+                          fprintf(stderr, "%s:scsi generic node is :%s:\n",
+                                          __func__,
+                                          sg_node_path);
+                          node_found = 1;
+                          break;
+                }
+        }
+        if(!node_found) {
+                fprintf(stderr,"%s: Unable to locate scsi generic node\n",
+                               __func__);
+                goto error;
+        }
+        closedir(scsi_dir);
+        return 0;
+error:
+        if (scsi_dir)
+                closedir(scsi_dir);
+        return -1;
+}
+
 int set_boot_lun(char *sg_dev, uint8_t boot_lun_id)
 {
 #ifndef _GENERIC_KERNEL_HEADERS
@@ -686,25 +745,30 @@ int gpt_utils_set_xbl_boot_partition(enum boot_chain chain)
         char sg_dev_node[PATH_MAX] = {0};
         uint8_t boot_lun_id = 0;
         const char *boot_dev = NULL;
+        const char *sg_dir = NULL;
 
         if (chain == BACKUP_BOOT) {
                 boot_lun_id = BOOT_LUN_B_ID;
-                if (!stat(XBL_BACKUP, &st))
+                if (!stat(XBL_BACKUP, &st)) {
                         boot_dev = XBL_BACKUP;
-                else if (!stat(XBL_AB_SECONDARY, &st))
+                        sg_dir = SCSI_NODE_SDC;
+                } else if (!stat(XBL_AB_SECONDARY, &st)) {
                         boot_dev = XBL_AB_SECONDARY;
-                else {
+                        sg_dir = SCSI_NODE_SDC;
+                } else {
                         fprintf(stderr, "%s: Failed to locate secondary xbl\n",
                                         __func__);
                         goto error;
                 }
         } else if (chain == NORMAL_BOOT) {
                 boot_lun_id = BOOT_LUN_A_ID;
-                if (!stat(XBL_PRIMARY, &st))
+                if (!stat(XBL_PRIMARY, &st)) {
                         boot_dev = XBL_PRIMARY;
-                else if (!stat(XBL_AB_PRIMARY, &st))
+                        sg_dir = SCSI_NODE_SDB;
+                } else if (!stat(XBL_AB_PRIMARY, &st)) {
                         boot_dev = XBL_AB_PRIMARY;
-                else {
+                        sg_dir = SCSI_NODE_SDB;
+                } else {
                         fprintf(stderr, "%s: Failed to locate primary xbl\n",
                                         __func__);
                         goto error;
@@ -727,7 +791,8 @@ int gpt_utils_set_xbl_boot_partition(enum boot_chain chain)
         fprintf(stderr, "%s: setting %s lun as boot lun\n",
                         __func__,
                         boot_dev);
-        if (get_scsi_node_from_bootdevice(boot_dev,
+	//if (get_scsi_node_from_bootdevice(boot_dev,
+        if (get_scsi_node_from_scsidir(sg_dir,
                                 sg_dev_node,
                                 sizeof(sg_dev_node))) {
                 fprintf(stderr, "%s: Failed to get scsi node path for xblbak\n",
@@ -746,6 +811,7 @@ error:
 
 int gpt_utils_is_ufs_device()
 {
+#if 0
     char bootdevice[PROPERTY_VALUE_MAX] = {0};
     property_get("ro.boot.bootdevice", bootdevice, "N/A");
     if (strlen(bootdevice) < strlen(".ufshc") + 1)
@@ -753,6 +819,66 @@ int gpt_utils_is_ufs_device()
     return (!strncmp(&bootdevice[strlen(bootdevice) - strlen(".ufshc")],
                             ".ufshc",
                             sizeof(".ufshc")));
+#else
+    int fd = -1;
+    ssize_t read_bytes = 0;
+    char *token = NULL;
+    char *cmdline = NULL;
+    char *temp = NULL;
+    static int is_ufs = -1 ;
+    
+    if (is_ufs != -1)
+       return is_ufs;
+
+   do {
+       fd = open(KERNEL_CMDLINE, O_RDONLY, 0);
+       if (fd == -1) {
+         fprintf(stderr, "%s: open: %s\n",
+               __func__, strerror(errno) );
+         break;
+      }
+
+      cmdline = (char *)malloc(CMDLINE_LEN + 1);
+      if (!cmdline) {
+         fprintf(stderr, "%s: malloc: %s\n",
+               __func__, strerror(errno) );
+         break;
+      }
+
+      read_bytes = read(fd, cmdline, CMDLINE_LEN);
+      if (-1 == read_bytes) {
+         fprintf(stderr, "%s: read: %s\n", __func__, strerror(errno));
+         break;
+      }
+
+      token = strtok_r(cmdline, " ", &temp);
+      while (token != NULL) {
+         if (!strncmp(token, CMDLINE_BOOT_DEV,
+                     strlen(CMDLINE_BOOT_DEV))) {
+            break;
+         }
+         token = strtok_r(NULL, " ", &temp);
+      }
+
+      if(!token) {
+         fprintf(stderr, "%s: %s not in kernel cmdline\n",
+                     __func__, CMDLINE_BOOT_DEV);
+         break;
+      } else if(strstr(token,".ufshc")) {
+         is_ufs = 1;
+      } else {
+         is_ufs = 0;
+      }
+   } while(0);
+
+//clean on exit:
+   if (fd >= 0)
+      close(fd);
+   if (cmdline)
+      free(cmdline);
+   printf("---is_ufs is %d\n\n", is_ufs);
+   return is_ufs;
+#endif
 }
 //dev_path is the path to the block device that contains the GPT image that
 //needs to be updated. This would be the device which holds one or more critical
@@ -1088,6 +1214,7 @@ static int get_dev_path_from_partition_name(const char *partname,
                 goto error;
         }
         if (gpt_utils_is_ufs_device()) {
+#if 0               
                 //Need to find the lun that holds partition partname
                 snprintf(path, sizeof(path),
                                 "%s/%s",
@@ -1102,6 +1229,21 @@ static int get_dev_path_from_partition_name(const char *partname,
                 } else {
                         buf[PATH_TRUNCATE_LOC] = '\0';
                 }
+#else
+                if (!strncmp(partname, "system_", 7)) {
+                        snprintf(buf, buflen, "/dev/sda");
+                }
+                else if (!strncmp(partname, "xbl_a", 5) || !strncmp(partname, "xbl_config_a", 12)) {
+                        snprintf(buf, buflen, "/dev/sdb");
+                }
+                else if (!strncmp(partname, "xbl_b", 5) || !strncmp(partname, "xbl_config_b", 12)) {
+                        snprintf(buf, buflen, "/dev/sdc");
+                }  
+                else {
+                        snprintf(buf, buflen, "/dev/sde");
+                }
+                buf[PATH_TRUNCATE_LOC] = '\0';
+#endif
         } else {
                 snprintf(buf, buflen, BLK_DEV_FILE);
         }
diff --git a/oem-recovery/gpt-utils.h b/oem-recovery/gpt-utils.h
index 689288c..c59b9a1 100644
--- a/oem-recovery/gpt-utils.h
+++ b/oem-recovery/gpt-utils.h
@@ -82,7 +82,7 @@ extern "C" {
 #define PTN_XBL_CFG                     "xbl_config"
 #define PTN_SWAP_LIST                   PTN_XBL, PTN_XBL_CFG, "sbl1", "rpm", "tz", "aboot", "abl", "hyp", "lksecapp", "keymaster", "cmnlib", "cmnlib32", "cmnlib64", "pmic", "apdp", "devcfg", "hosd", "keystore", "msadp", "mdtp", "mdtpsecapp", "dsp", "aop", "qupfw", "vbmeta", "dtbo", "imagefv", "ImageFv", "multiimgoem", "multiimgqti", "vm-system", "vm-linux", "uefisecapp"
 #define AB_PTN_LIST PTN_SWAP_LIST, "boot", "system", "vendor", "modem", "bluetooth"
-#define BOOT_DEV_DIR    "/dev/block/bootdevice/by-name"
+#define BOOT_DEV_DIR    "/dev/disk/by-partlabel"
 
 /******************************************************************************
  * HELPER MACROS
-- 
2.7.4

