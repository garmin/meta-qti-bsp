From 1ebf0c0feb4e8fede1f94bbc4f0481a8544bbd70 Mon Sep 17 00:00:00 2001
From: Lily Li <lali@codeaurora.org>
Date: Mon, 21 Oct 2019 10:53:41 +0800
Subject: [PATCH 19/42] gst-omx: support vp8 encoder

add vp8enc gstomx source code and modify gstomx.conf

cherry-pick from 2697464

Change-Id: Ib60ce84740e5b784725f01c864863277bef5ff3c
Signed-off-by: Lily Li <lali@codeaurora.org>
---
 config/qti/vpu554/gstomx.conf |  12 +--
 omx/Makefile.am               |   4 +
 omx/gstomx.c                  |   2 +
 omx/gstomxvp8enc.c            | 240 ++++++++++++++++++++++++++++++++++++++++++
 omx/gstomxvp8enc.h            |  63 +++++++++++
 5 files changed, 315 insertions(+), 6 deletions(-)
 create mode 100644 omx/gstomxvp8enc.c
 create mode 100644 omx/gstomxvp8enc.h

diff --git a/config/qti/vpu554/gstomx.conf b/config/qti/vpu554/gstomx.conf
index 0a76823..214281a 100644
--- a/config/qti/vpu554/gstomx.conf
+++ b/config/qti/vpu554/gstomx.conf
@@ -164,19 +164,19 @@ in-port-index=0
 out-port-index=1
 hacks=no-disable-outport;skip-input-bufs
 
-[omxheicenc]
-type-name=GstOMXHEICEnc
+[omxvp8enc]
+type-name=GstOMXVP8Enc
 core-name=/usr/lib64/libOmxCore.so
-component-name=OMX.qcom.video.encoder.heic
+component-name=OMX.qcom.video.encoder.vp8
 rank=256
 in-port-index=0
 out-port-index=1
 hacks=no-disable-outport;skip-input-bufs
 
-[omxvp8enc]
-type-name=GstOMXVP8Enc
+[omxheicenc]
+type-name=GstOMXHEICEnc
 core-name=/usr/lib64/libOmxCore.so
-component-name=OMX.qcom.video.encoder.vp8
+component-name=OMX.qcom.video.encoder.heic
 rank=256
 in-port-index=0
 out-port-index=1
diff --git a/omx/Makefile.am b/omx/Makefile.am
index 7390872..f5fcb4d 100644
--- a/omx/Makefile.am
+++ b/omx/Makefile.am
@@ -3,6 +3,8 @@ plugin_LTLIBRARIES = libgstomx.la
 if HAVE_VP8
 VP8_C_FILES=gstomxvp8dec.c
 VP8_H_FILES=gstomxvp8dec.h
+VP8ENC_C_FILES=gstomxvp8enc.c
+VP8ENC_H_FILES=gstomxvp8enc.h
 endif
 
 if HAVE_THEORA
@@ -49,6 +51,7 @@ libgstomx_la_SOURCES = \
 	gstomxh263dec.c \
 	gstomxwmvdec.c \
 	$(VP8_C_FILES) \
+	$(VP8ENC_C_FILES) \
 	$(THEORA_C_FILES) \
 	$(H265_C_FILES) \
 	$(VP9_C_FILES) \
@@ -81,6 +84,7 @@ noinst_HEADERS = \
 	gstomxh263dec.h \
 	gstomxwmvdec.h \
 	$(VP8_H_FILES) \
+	$(VP8ENC_H_FILES) \
 	$(THEORA_H_FILES) \
 	$(H265_H_FILES) \
 	$(VP9_H_FILES) \
diff --git a/omx/gstomx.c b/omx/gstomx.c
index 16fcbe3..a55574c 100644
--- a/omx/gstomx.c
+++ b/omx/gstomx.c
@@ -36,6 +36,7 @@
 #include "gstomxh263dec.h"
 #include "gstomxh265dec.h"
 #include "gstomxvp8dec.h"
+#include "gstomxvp8enc.h"
 #include "gstomxtheoradec.h"
 #include "gstomxwmvdec.h"
 #include "gstomxmpeg4videoenc.h"
@@ -3472,6 +3473,7 @@ static const GGetTypeFunction types[] = {
   gst_omx_amr_dec_get_type
 #ifdef HAVE_VP8
       , gst_omx_vp8_dec_get_type
+      , gst_omx_vp8_enc_get_type
 #endif
 #ifdef HAVE_THEORA
       , gst_omx_theora_dec_get_type
diff --git a/omx/gstomxvp8enc.c b/omx/gstomxvp8enc.c
new file mode 100644
index 0000000..b49be2e
--- /dev/null
+++ b/omx/gstomxvp8enc.c
@@ -0,0 +1,240 @@
+/*-------------------------------------------------------------------
+ *Copyright (c) 2019, The Linux Foundation. All rights reserved.
+--------------------------------------------------------------------*/
+/*
+ * Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
+ *   Author: Sebastian Dr√∂ge <sebastian.droege@collabora.co.uk>, Collabora Ltd.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
+ *
+ */
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <gst/gst.h>
+#include "gstomxvp8enc.h"
+
+GST_DEBUG_CATEGORY_STATIC (gst_omx_vp8_enc_debug_category);
+#define GST_CAT_DEFAULT gst_omx_vp8_enc_debug_category
+
+/* prototypes */
+static gboolean gst_omx_vp8_enc_set_format (GstOMXVideoEnc * enc,
+    GstOMXPort * port, GstVideoCodecState * state);
+static GstCaps *gst_omx_vp8_enc_get_caps (GstOMXVideoEnc * enc,
+    GstOMXPort * port, GstVideoCodecState * state);
+
+enum
+{
+  PROP_0
+};
+/* class initialization */
+
+
+
+#define DEBUG_INIT \
+  GST_DEBUG_CATEGORY_INIT (gst_omx_vp8_enc_debug_category, "omxvp8enc", 0, \
+      "debug category for gst-omx video encoder base class");
+
+G_DEFINE_TYPE_WITH_CODE (GstOMXVP8Enc, gst_omx_vp8_enc,
+    GST_TYPE_OMX_VIDEO_ENC, DEBUG_INIT);
+
+static void
+gst_omx_vp8_enc_class_init (GstOMXVP8EncClass * klass)
+{
+  GstElementClass *element_class = GST_ELEMENT_CLASS (klass);
+  GstOMXVideoEncClass *videoenc_class = GST_OMX_VIDEO_ENC_CLASS (klass);
+
+  videoenc_class->set_format =
+      GST_DEBUG_FUNCPTR (gst_omx_vp8_enc_set_format);
+  videoenc_class->get_caps =
+      GST_DEBUG_FUNCPTR (gst_omx_vp8_enc_get_caps);
+
+  videoenc_class->cdata.default_src_template_caps = "video/x-vp8, "
+      "width=(int) [ 16, 4096 ], " "height=(int) [ 16, 4096 ]";
+
+  gst_element_class_set_static_metadata (element_class,
+      "OpenMAX vp8 Encoder",
+      "Codec/Encoder/Video",
+      "Encode vp8 streams",
+      "qti");
+
+  gst_omx_set_default_role (&videoenc_class->cdata, "video_encoder.vp8");
+}
+
+static void
+gst_omx_vp8_enc_init (GstOMXVP8Enc * self)
+{
+}
+
+static gboolean
+gst_omx_vp8_enc_set_format (GstOMXVideoEnc * enc, GstOMXPort * port,
+    GstVideoCodecState * state)
+{
+  GstOMXVP8Enc *self = GST_OMX_VP8_ENC (enc);
+  GstCaps *peercaps, *intersection;
+  OMX_PARAM_PORTDEFINITIONTYPE port_def;
+  OMX_VIDEO_PARAM_PROFILELEVELTYPE param;
+  OMX_ERRORTYPE err;
+  const gchar *profile_string, *level_string;
+
+  gst_omx_port_get_port_definition (GST_OMX_VIDEO_ENC (self)->enc_out_port,
+      &port_def);
+  port_def.format.video.eCompressionFormat = OMX_VIDEO_CodingVP8;
+  err =
+      gst_omx_port_update_port_definition (GST_OMX_VIDEO_ENC
+      (self)->enc_out_port, &port_def);
+  if (err != OMX_ErrorNone)
+    return FALSE;
+
+  GST_OMX_INIT_STRUCT (&param);
+  param.nPortIndex = GST_OMX_VIDEO_ENC (self)->enc_out_port->index;
+
+  err =
+      gst_omx_component_get_parameter (GST_OMX_VIDEO_ENC (self)->enc,
+      OMX_IndexParamVideoProfileLevelCurrent, &param);
+  if (err != OMX_ErrorNone) {
+    GST_WARNING_OBJECT (self,
+        "Getting profile/level not supported by component");
+    return FALSE;
+  }
+
+  peercaps = gst_pad_peer_query_caps (GST_VIDEO_ENCODER_SRC_PAD (enc), NULL);
+  if (peercaps) {
+    GstStructure *s;
+
+    intersection =
+        gst_caps_intersect (peercaps,
+        gst_pad_get_pad_template_caps (GST_VIDEO_ENCODER_SRC_PAD (enc)));
+
+    gst_caps_unref (peercaps);
+    if (gst_caps_is_empty (intersection)) {
+      gst_caps_unref (intersection);
+      GST_ERROR_OBJECT (self, "Empty caps");
+      return FALSE;
+    }
+
+    s = gst_caps_get_structure (intersection, 0);
+    profile_string = gst_structure_get_string (s, "profile");
+    if (profile_string) {
+      if (g_str_equal (profile_string, "main")) {
+        param.eProfile = OMX_VIDEO_VP8ProfileMain;
+      } else {
+        goto unsupported_profile;
+      }
+    }
+    level_string = gst_structure_get_string (s, "level");
+    if (level_string) {
+      if (g_str_equal (level_string, "0")) {
+        param.eLevel = OMX_VIDEO_VP8Level_Version0;
+      } else if (g_str_equal (level_string, "1")) {
+        param.eLevel = OMX_VIDEO_VP8Level_Version1;
+      } else if (g_str_equal (level_string, "2")) {
+        param.eLevel = OMX_VIDEO_VP8Level_Version2;
+      } else if (g_str_equal (level_string, "3")) {
+        param.eLevel = OMX_VIDEO_VP8Level_Version3;
+      } else {
+        goto unsupported_level;
+      }
+    }
+
+    gst_caps_unref (intersection);
+  }
+
+  err =
+      gst_omx_component_set_parameter (GST_OMX_VIDEO_ENC (self)->enc,
+      OMX_IndexParamVideoProfileLevelCurrent, &param);
+  if (err == OMX_ErrorUnsupportedIndex) {
+    GST_WARNING_OBJECT (self,
+        "Setting profile/level not supported by component");
+  } else if (err != OMX_ErrorNone) {
+    GST_ERROR_OBJECT (self,
+        "Error setting profile %u and level %u: %s (0x%08x)",
+        (guint) param.eProfile, (guint) param.eLevel,
+        gst_omx_error_to_string (err), err);
+    return FALSE;
+  }
+
+  return TRUE;
+
+unsupported_profile:
+  GST_ERROR_OBJECT (self, "Unsupported profile %s", profile_string);
+  gst_caps_unref (intersection);
+  return FALSE;
+
+unsupported_level:
+  GST_ERROR_OBJECT (self, "Unsupported level %s", level_string);
+  gst_caps_unref (intersection);
+  return FALSE;
+}
+
+static GstCaps *
+gst_omx_vp8_enc_get_caps (GstOMXVideoEnc * enc, GstOMXPort * port,
+    GstVideoCodecState * state)
+{
+  GstOMXVP8Enc *self = GST_OMX_VP8_ENC (enc);
+  GstCaps *caps;
+  OMX_ERRORTYPE err;
+  OMX_VIDEO_PARAM_PROFILELEVELTYPE param;
+  const gchar *profile, *level;
+
+  caps =  gst_caps_new_empty_simple ("video/x-vp8");
+
+  GST_OMX_INIT_STRUCT (&param);
+  param.nPortIndex = GST_OMX_VIDEO_ENC (self)->enc_out_port->index;
+
+  err =
+      gst_omx_component_get_parameter (GST_OMX_VIDEO_ENC (self)->enc,
+      OMX_IndexParamVideoProfileLevelCurrent, &param);
+  if (err != OMX_ErrorNone && err != OMX_ErrorUnsupportedIndex) {
+    gst_caps_unref (caps);
+    return NULL;
+  }
+
+  if (err == OMX_ErrorNone) {
+    switch (param.eProfile) {
+      case OMX_VIDEO_VP8ProfileMain:
+        profile = "main";
+        break;
+      default:
+        g_assert_not_reached ();
+        return NULL;
+    }
+
+    switch (param.eLevel) {
+      case OMX_VIDEO_VP8Level_Version0:
+        level = "0";
+        break;
+      case OMX_VIDEO_VP8Level_Version1:
+        level = "1";
+        break;
+      case OMX_VIDEO_VP8Level_Version2:
+        level = "2";
+        break;
+      case OMX_VIDEO_VP8Level_Version3:
+        level = "3";
+        break;
+      default:
+        g_assert_not_reached ();
+        return NULL;
+    }
+
+    gst_caps_set_simple (caps,
+        "profile", G_TYPE_STRING, profile, "level", G_TYPE_STRING, level, NULL);
+  }
+
+  return caps;
+}
+
diff --git a/omx/gstomxvp8enc.h b/omx/gstomxvp8enc.h
new file mode 100644
index 0000000..56bb711
--- /dev/null
+++ b/omx/gstomxvp8enc.h
@@ -0,0 +1,63 @@
+/*-------------------------------------------------------------------
+ *Copyright (c) 2019, The Linux Foundation. All rights reserved.
+--------------------------------------------------------------------*/
+/*
+ * Copyright (C) 2011, Hewlett-Packard Development Company, L.P.
+ *   Author: Sebastian Dr√∂ge <sebastian.droege@collabora.co.uk>, Collabora Ltd.
+ *
+ * This library is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU Lesser General Public
+ * License as published by the Free Software Foundation
+ * version 2.1 of the License.
+ *
+ * This library is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * Lesser General Public License for more details.
+ *
+ * You should have received a copy of the GNU Lesser General Public
+ * License along with this library; if not, write to the Free Software
+ * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301 USA
+ *
+ */
+
+#ifndef __GST_OMX_VP8_ENC_H__
+#define __GST_OMX_VP8_ENC_H__
+
+#include <gst/gst.h>
+#include "gstomxvideoenc.h"
+
+G_BEGIN_DECLS
+
+#define GST_TYPE_OMX_VP8_ENC \
+  (gst_omx_vp8_enc_get_type())
+#define GST_OMX_VP8_ENC(obj) \
+  (G_TYPE_CHECK_INSTANCE_CAST((obj),GST_TYPE_OMX_VP8_ENC,GstOMXVP8Enc))
+#define GST_OMX_VP8_ENC_CLASS(klass) \
+  (G_TYPE_CHECK_CLASS_CAST((klass),GST_TYPE_OMX_VP8_ENC,GstOMXVP8EncClass))
+#define GST_OMX_VP8_ENC_GET_CLASS(obj) \
+  (G_TYPE_INSTANCE_GET_CLASS((obj),GST_TYPE_OMX_VP8_ENC,GstOMXVP8EncClass))
+#define GST_IS_OMX_VP8_ENC(obj) \
+  (G_TYPE_CHECK_INSTANCE_TYPE((obj),GST_TYPE_OMX_VP8_ENC))
+#define GST_IS_OMX_VP8_ENC_CLASS(obj) \
+  (G_TYPE_CHECK_CLASS_TYPE((klass),GST_TYPE_OMX_VP8_ENC))
+
+typedef struct _GstOMXVP8Enc GstOMXVP8Enc;
+typedef struct _GstOMXVP8EncClass GstOMXVP8EncClass;
+
+struct _GstOMXVP8Enc
+{
+  GstOMXVideoEnc parent;
+};
+
+struct _GstOMXVP8EncClass
+{
+  GstOMXVideoEncClass parent_class;
+};
+
+GType gst_omx_vp8_enc_get_type (void);
+
+G_END_DECLS
+
+#endif /* __GST_OMX_VP8_ENC_H__ */
+
-- 
2.7.4

