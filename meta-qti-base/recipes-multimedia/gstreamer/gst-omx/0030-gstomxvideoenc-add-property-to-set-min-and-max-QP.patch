From af6fb498d242cb11270b589dc48d61e3f82c3555 Mon Sep 17 00:00:00 2001
From: Bo Fang <bofang1@codeaurora.org>
Date: Tue, 26 Mar 2019 18:45:51 +0800
Subject: [PATCH 30/42] gstomxvideoenc: add property to set min and max QP for
 I/P/B frame

Change-Id: Ibaffe39939bcc9d5e09a24f59a3fc936d3145d03
Signed-off-by: Bo Fang <bofang1@codeaurora.org>
---
 omx/gstomxvideoenc.c | 137 +++++++++++++++++++++++++++++++++++++++++++++++++++
 omx/gstomxvideoenc.h |   7 +++
 2 files changed, 144 insertions(+)

diff --git a/omx/gstomxvideoenc.c b/omx/gstomxvideoenc.c
index 96cfb3f..4478a0f 100644
--- a/omx/gstomxvideoenc.c
+++ b/omx/gstomxvideoenc.c
@@ -255,6 +255,12 @@ enum
   PROP_INIT_QUANT_I_FRAMES,
   PROP_INIT_QUANT_P_FRAMES,
   PROP_INIT_QUANT_B_FRAMES,
+  PROP_MIN_QUANT_I_FRAMES,
+  PROP_MAX_QUANT_I_FRAMES,
+  PROP_MIN_QUANT_P_FRAMES,
+  PROP_MAX_QUANT_P_FRAMES,
+  PROP_MIN_QUANT_B_FRAMES,
+  PROP_MAX_QUANT_B_FRAMES,
   PROP_QP_MODE,
   PROP_MIN_QP,
   PROP_MAX_QP,
@@ -282,6 +288,12 @@ enum
 #define GST_OMX_VIDEO_ENC_INIT_QUANT_I_FRAMES_DEFAULT (0xffffffff)
 #define GST_OMX_VIDEO_ENC_INIT_QUANT_P_FRAMES_DEFAULT (0xffffffff)
 #define GST_OMX_VIDEO_ENC_INIT_QUANT_B_FRAMES_DEFAULT (0xffffffff)
+#define GST_OMX_VIDEO_ENC_MIN_QUANT_I_FRAMES_DEFAULT (0xffffffff)
+#define GST_OMX_VIDEO_ENC_MAX_QUANT_I_FRAMES_DEFAULT (0xffffffff)
+#define GST_OMX_VIDEO_ENC_MIN_QUANT_P_FRAMES_DEFAULT (0xffffffff)
+#define GST_OMX_VIDEO_ENC_MAX_QUANT_P_FRAMES_DEFAULT (0xffffffff)
+#define GST_OMX_VIDEO_ENC_MIN_QUANT_B_FRAMES_DEFAULT (0xffffffff)
+#define GST_OMX_VIDEO_ENC_MAX_QUANT_B_FRAMES_DEFAULT (0xffffffff)
 
 #define GST_OMX_VIDEO_ENC_QP_MODE_DEFAULT (0xffffffff)
 #define GST_OMX_VIDEO_ENC_MIN_QP_DEFAULT (10)
@@ -380,6 +392,48 @@ gst_omx_video_enc_class_init (GstOMXVideoEncClass * klass)
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
           GST_PARAM_MUTABLE_READY));
 
+  g_object_class_install_property (gobject_class, PROP_MIN_QUANT_I_FRAMES,
+      g_param_spec_uint ("min-quant-i-frames", "I-Frame Min Quantization",
+          "Min Quantization parameter for I-frames (0xffffffff=component default)",
+          0, G_MAXUINT, GST_OMX_VIDEO_ENC_MIN_QUANT_I_FRAMES_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
+  g_object_class_install_property (gobject_class, PROP_MAX_QUANT_I_FRAMES,
+      g_param_spec_uint ("max-quant-i-frames", "I-Frame Max Quantization",
+          "Max Quantization parameter for I-frames (0xffffffff=component default)",
+          0, G_MAXUINT, GST_OMX_VIDEO_ENC_MAX_QUANT_I_FRAMES_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
+  g_object_class_install_property (gobject_class, PROP_MIN_QUANT_P_FRAMES,
+      g_param_spec_uint ("min-quant-p-frames", "P-Frame Min Quantization",
+          "Max Quantization parameter for P-frames (0xffffffff=component default)",
+          0, G_MAXUINT, GST_OMX_VIDEO_ENC_MIN_QUANT_P_FRAMES_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
+  g_object_class_install_property (gobject_class, PROP_MAX_QUANT_P_FRAMES,
+      g_param_spec_uint ("max-quant-p-frames", "P-Frame Max Quantization",
+          "Max Quantization parameter for P-frames (0xffffffff=component default)",
+          0, G_MAXUINT, GST_OMX_VIDEO_ENC_MAX_QUANT_P_FRAMES_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
+  g_object_class_install_property (gobject_class, PROP_MIN_QUANT_B_FRAMES,
+      g_param_spec_uint ("min-quant-b-frames", "B-Frame Min Quantization",
+          "Min Quantization parameter for B-frames (0xffffffff=component default)",
+          0, G_MAXUINT, GST_OMX_VIDEO_ENC_MIN_QUANT_B_FRAMES_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
+  g_object_class_install_property (gobject_class, PROP_MAX_QUANT_B_FRAMES,
+      g_param_spec_uint ("max-quant-b-frames", "B-Frame Max Quantization",
+          "Max Quantization parameter for B-frames (0xffffffff=component default)",
+          0, G_MAXUINT, GST_OMX_VIDEO_ENC_MAX_QUANT_B_FRAMES_DEFAULT,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS |
+          GST_PARAM_MUTABLE_READY));
+
 #ifdef USE_OMX_TARGET_ZYNQ_USCALE_PLUS
   g_object_class_install_property (gobject_class, PROP_QP_MODE,
       g_param_spec_enum ("qp-mode", "QP mode",
@@ -543,6 +597,13 @@ gst_omx_video_enc_init (GstOMXVideoEnc * self)
   self->init_quant_i_frames = GST_OMX_VIDEO_ENC_INIT_QUANT_I_FRAMES_DEFAULT;
   self->init_quant_p_frames = GST_OMX_VIDEO_ENC_INIT_QUANT_P_FRAMES_DEFAULT;
   self->init_quant_b_frames = GST_OMX_VIDEO_ENC_INIT_QUANT_B_FRAMES_DEFAULT;
+  self->min_quant_i_frames = GST_OMX_VIDEO_ENC_MIN_QUANT_I_FRAMES_DEFAULT;
+  self->min_quant_p_frames = GST_OMX_VIDEO_ENC_MIN_QUANT_P_FRAMES_DEFAULT;
+  self->min_quant_b_frames = GST_OMX_VIDEO_ENC_MIN_QUANT_B_FRAMES_DEFAULT;
+  self->max_quant_i_frames = GST_OMX_VIDEO_ENC_MAX_QUANT_I_FRAMES_DEFAULT;
+  self->max_quant_p_frames = GST_OMX_VIDEO_ENC_MAX_QUANT_P_FRAMES_DEFAULT;
+  self->max_quant_b_frames = GST_OMX_VIDEO_ENC_MAX_QUANT_B_FRAMES_DEFAULT;
+
 #ifdef USE_OMX_TARGET_ZYNQ_USCALE_PLUS
   self->qp_mode = GST_OMX_VIDEO_ENC_QP_MODE_DEFAULT;
   self->min_qp = GST_OMX_VIDEO_ENC_MIN_QP_DEFAULT;
@@ -999,6 +1060,44 @@ gst_omx_video_enc_open (GstVideoEncoder * encoder)
       }
     }
 
+    if (self->min_quant_i_frames != 0xffffffff || self->min_quant_p_frames != 0xffffffff || self->min_quant_b_frames != 0xffffffff ||
+        self->max_quant_i_frames != 0xffffffff || self->max_quant_p_frames != 0xffffffff || self->max_quant_b_frames != 0xffffffff) {
+      OMX_QCOM_VIDEO_PARAM_IPB_QPRANGETYPE QPRanges;
+      GST_OMX_INIT_STRUCT (&QPRanges);
+      QPRanges.nPortIndex = self->enc_out_port->index;
+      err = gst_omx_component_get_parameter (self->enc, (OMX_INDEXTYPE)OMX_QcomIndexParamVideoIPBQPRange, &QPRanges);
+      if (err == OMX_ErrorNone) {
+        GST_DEBUG_OBJECT (self, "Got QP range, I %d-%d, P %d-%d, B %d-%d, will change qp range based on it", QPRanges.minIQP, QPRanges.maxIQP, QPRanges.minPQP, QPRanges.maxPQP, QPRanges.minBQP, QPRanges.maxBQP);
+        if (self->min_quant_i_frames != 0xffffffff)
+          QPRanges.minIQP = self->min_quant_i_frames;
+        if (self->min_quant_p_frames != 0xffffffff)
+          QPRanges.minPQP = self->min_quant_p_frames;
+        if (self->min_quant_b_frames != 0xffffffff)
+          QPRanges.minBQP = self->min_quant_b_frames;
+        if (self->max_quant_i_frames != 0xffffffff)
+          QPRanges.maxIQP = self->max_quant_i_frames;
+        if (self->max_quant_p_frames != 0xffffffff)
+          QPRanges.maxPQP = self->max_quant_p_frames;
+        if (self->max_quant_b_frames != 0xffffffff)
+          QPRanges.maxBQP = self->max_quant_b_frames;
+
+        if (QPRanges.minIQP > QPRanges.maxIQP || QPRanges.minPQP > QPRanges.maxPQP || QPRanges.minBQP > QPRanges.maxBQP) {
+          //If user only set min QP, it probably bigger than default max QP, user should set a bigger max QP. The same for max QP.
+          GST_ERROR_OBJECT (self, "QP range not reasonable, I %d-%d, P %d-%d, B %d-%d", QPRanges.minIQP, QPRanges.maxIQP, QPRanges.minPQP, QPRanges.maxPQP, QPRanges.minBQP, QPRanges.maxBQP);
+          return FALSE;
+        }
+
+        err = gst_omx_component_set_parameter (self->enc,
+              (OMX_INDEXTYPE)OMX_QcomIndexParamVideoIPBQPRange, &QPRanges);
+        if (err != OMX_ErrorNone) {
+          GST_ERROR_OBJECT (self, "Failed to set I/P/B QP range parameters: %s (0x%08x)", gst_omx_error_to_string (err), err);
+          return FALSE;
+        }
+      } else {
+        GST_ERROR_OBJECT (self, "Failed to get I/P/B QP range parameters: %s (0x%08x)", gst_omx_error_to_string (err), err);
+      }
+    }
+
   }
 #ifdef USE_OMX_TARGET_ZYNQ_USCALE_PLUS
   if (!set_zynqultrascaleplus_props (self))
@@ -1126,6 +1225,25 @@ gst_omx_video_enc_set_property (GObject * object, guint prop_id,
     case PROP_INIT_QUANT_B_FRAMES:
       self->init_quant_b_frames = g_value_get_uint (value);
       break;
+    case PROP_MIN_QUANT_I_FRAMES:
+      self->min_quant_i_frames = g_value_get_uint (value);
+      break;
+    case PROP_MIN_QUANT_P_FRAMES:
+      self->min_quant_p_frames = g_value_get_uint (value);
+      break;
+    case PROP_MIN_QUANT_B_FRAMES:
+      self->min_quant_b_frames = g_value_get_uint (value);
+      break;
+    case PROP_MAX_QUANT_I_FRAMES:
+      self->max_quant_i_frames = g_value_get_uint (value);
+      break;
+    case PROP_MAX_QUANT_P_FRAMES:
+      self->max_quant_p_frames = g_value_get_uint (value);
+      break;
+    case PROP_MAX_QUANT_B_FRAMES:
+      self->max_quant_b_frames = g_value_get_uint (value);
+      break;
+
 #ifdef USE_OMX_TARGET_ZYNQ_USCALE_PLUS
     case PROP_QP_MODE:
       self->qp_mode = g_value_get_enum (value);
@@ -1215,6 +1333,25 @@ gst_omx_video_enc_get_property (GObject * object, guint prop_id, GValue * value,
     case PROP_INIT_QUANT_B_FRAMES:
       g_value_set_uint (value, self->init_quant_b_frames);
       break;
+    case PROP_MIN_QUANT_I_FRAMES:
+      g_value_set_uint (value, self->min_quant_i_frames);
+      break;
+    case PROP_MIN_QUANT_P_FRAMES:
+      g_value_set_uint (value, self->min_quant_p_frames);
+      break;
+    case PROP_MIN_QUANT_B_FRAMES:
+      g_value_set_uint (value, self->min_quant_b_frames);
+      break;
+    case PROP_MAX_QUANT_I_FRAMES:
+      g_value_set_uint (value, self->max_quant_i_frames);
+      break;
+    case PROP_MAX_QUANT_P_FRAMES:
+      g_value_set_uint (value, self->max_quant_p_frames);
+      break;
+    case PROP_MAX_QUANT_B_FRAMES:
+      g_value_set_uint (value, self->max_quant_b_frames);
+      break;
+
 #ifdef USE_OMX_TARGET_ZYNQ_USCALE_PLUS
     case PROP_QP_MODE:
       g_value_set_enum (value, self->qp_mode);
diff --git a/omx/gstomxvideoenc.h b/omx/gstomxvideoenc.h
index 0d0e777..ead13cc 100644
--- a/omx/gstomxvideoenc.h
+++ b/omx/gstomxvideoenc.h
@@ -86,6 +86,13 @@ struct _GstOMXVideoEnc
   guint32 init_quant_i_frames;
   guint32 init_quant_p_frames;
   guint32 init_quant_b_frames;
+  guint32 min_quant_i_frames;
+  guint32 min_quant_p_frames;
+  guint32 min_quant_b_frames;
+  guint32 max_quant_i_frames;
+  guint32 max_quant_p_frames;
+  guint32 max_quant_b_frames;
+
 #ifdef USE_OMX_TARGET_ZYNQ_USCALE_PLUS
   guint32 qp_mode;
   guint32 min_qp;
-- 
2.7.4

