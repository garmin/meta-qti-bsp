From e6413bc7e53a106f907b7531b23052c4dba5eb38 Mon Sep 17 00:00:00 2001
From: Lily Li <lali@codeaurora.org>
Date: Wed, 28 Aug 2019 12:33:15 +0800
Subject: [PATCH 06/42] omxvideodec: Handle the port rectangle change event.

Change-Id: I62f4d57f61fa88b59dc76dce9cd3c05a04ab3d69
Signed-off-by: Lily Li <lali@codeaurora.org>
---
 omx/gstomx.c         | 58 ++++++++++++++++++++++++++++++++++++++++++++++++----
 omx/gstomx.h         |  5 +++++
 omx/gstomxvideodec.c | 53 +++++++++++++++++++++++++++++++++++++----------
 3 files changed, 101 insertions(+), 15 deletions(-)

diff --git a/omx/gstomx.c b/omx/gstomx.c
index 488e0bc..3282820 100644
--- a/omx/gstomx.c
+++ b/omx/gstomx.c
@@ -384,6 +384,29 @@ gst_omx_component_handle_messages (GstOMXComponent * comp)
 
         break;
       }
+      case GST_OMX_MESSAGE_PORT_RECT_CHANGED:{
+        OMX_U32 index = msg->content.port_settings_changed.port;
+        GstOMXPort *port = NULL;
+
+        GST_DEBUG_OBJECT (comp->parent, "%s rectangle crop changed (port %u)",
+            comp->name, index);
+
+        port = gst_omx_component_get_port (comp, index);
+        if (!port)
+          break;
+
+        if (port->port_def.eDir != OMX_DirOutput) {
+          GST_WARNING_OBJECT (comp->parent,
+              "rect crop should happened on out port");
+          break;
+        }
+        port->pending_bufs_before_rect_change =
+          g_queue_get_length (&port->pending_buffers);
+        port->rect_changed = TRUE;
+        GST_DEBUG_OBJECT (comp->parent, "%s pending rect change buffers %u",
+            comp->name, port->pending_bufs_before_rect_change);
+        break;
+      }
       case GST_OMX_MESSAGE_BUFFER_DONE:{
         GstOMXBuffer *buf = msg->content.buffer_done.buffer->pAppPrivate;
         GstOMXPort *port;
@@ -746,11 +769,19 @@ EventHandler (OMX_HANDLETYPE hComponent, OMX_PTR pAppData, OMX_EVENTTYPE eEvent,
                 GST_OMX_HACK_EVENT_PORT_SETTINGS_CHANGED_PORT_0_TO_1))
           index = 1;
 
-
-        msg->type = GST_OMX_MESSAGE_PORT_SETTINGS_CHANGED;
-        msg->content.port_settings_changed.port = index;
-        GST_DEBUG_OBJECT (comp->parent, "%s settings changed (port index: %u)",
+        if (nData2 == OMX_IndexParamPortDefinition)
+		{
+          msg->type = GST_OMX_MESSAGE_PORT_SETTINGS_CHANGED;
+          msg->content.port_settings_changed.port = index;
+          GST_DEBUG_OBJECT (comp->parent, "%s settings changed (port index: %u)",
+            comp->name, (guint) msg->content.port_settings_changed.port);
+		}
+        else if (nData2 == OMX_IndexConfigCommonOutputCrop){
+          msg->type = GST_OMX_MESSAGE_PORT_RECT_CHANGED;
+          msg->content.port_settings_changed.port = index;
+          GST_DEBUG_OBJECT (comp->parent, "%s rectangle changed (port index: %u)",
             comp->name, (guint) msg->content.port_settings_changed.port);
+        }
 
         gst_omx_component_send_message (comp, msg);
       }
@@ -2167,6 +2198,8 @@ retry:
           comp->name, port->index);
       _buf = g_queue_pop_head (&port->pending_buffers);
 
+      if (port->pending_bufs_before_rect_change > 0)
+        port->pending_bufs_before_rect_change--;
       ret = GST_OMX_ACQUIRE_BUFFER_OK;
       goto done;
     }
@@ -2183,6 +2216,8 @@ retry:
           "buffers pending", comp->name, port->index);
       _buf = g_queue_pop_head (&port->pending_buffers);
 
+      if (port->pending_bufs_before_rect_change > 0)
+        port->pending_bufs_before_rect_change--;
       ret = GST_OMX_ACQUIRE_BUFFER_OK;
       goto done;
     }
@@ -2201,6 +2236,21 @@ retry:
     }
   }
 
+  if (port->port_def.eDir == OMX_DirOutput &&
+      port->rect_changed == TRUE) {
+    if (port->pending_bufs_before_rect_change > 0) {
+      GST_DEBUG_OBJECT (comp->parent, "%s output port %u has rect change"
+          "pending buffer", comp->name, port->index);
+      _buf = g_queue_pop_head (&port->pending_buffers);
+
+      port->pending_bufs_before_rect_change--;
+      ret = GST_OMX_ACQUIRE_BUFFER_OK;
+      goto done;
+    }
+    port->rect_changed = FALSE;
+    ret = GST_OMX_ACQUIRE_BUFFER_RECT_CHANGED;
+    goto done;
+  }
   /*
    * At this point we have no error or flushing/eos port
    * and a properly configured port.
diff --git a/omx/gstomx.h b/omx/gstomx.h
index be6b300..1bbced4 100644
--- a/omx/gstomx.h
+++ b/omx/gstomx.h
@@ -241,6 +241,7 @@ typedef enum {
   GST_OMX_ACQUIRE_BUFFER_ERROR,
   /* No buffer is currently available (used when calling gst_omx_port_acquire_buffer() in not waiting mode) */
   GST_OMX_ACQUIRE_BUFFER_NO_AVAILABLE,
+  GST_OMX_ACQUIRE_BUFFER_RECT_CHANGED
 } GstOMXAcquireBufferReturn;
 
 struct _GstOMXCore {
@@ -269,6 +270,7 @@ typedef enum {
   GST_OMX_MESSAGE_PORT_SETTINGS_CHANGED,
   GST_OMX_MESSAGE_BUFFER_FLAG,
   GST_OMX_MESSAGE_BUFFER_DONE,
+  GST_OMX_MESSAGE_PORT_RECT_CHANGED
 } GstOMXMessageType;
 
 typedef enum {
@@ -345,6 +347,9 @@ struct _GstOMXPort {
    */
   gint settings_cookie;
   gint configured_settings_cookie;
+
+  guint pending_bufs_before_rect_change;
+  gboolean rect_changed;
 };
 
 struct _GstOMXComponent {
diff --git a/omx/gstomxvideodec.c b/omx/gstomxvideodec.c
index 6830cac..605d6d4 100644
--- a/omx/gstomxvideodec.c
+++ b/omx/gstomxvideodec.c
@@ -87,6 +87,8 @@ static OMX_ERRORTYPE gst_omx_video_dec_allocate_output_buffers (GstOMXVideoDec *
     self);
 static gboolean gst_omx_video_dec_deallocate_output_buffers (GstOMXVideoDec
     * self);
+static void gst_omx_video_dec_get_recttype (GstOMXVideoDec * self,
+    OMX_CONFIG_RECTTYPE *rect, OMX_PARAM_PORTDEFINITIONTYPE *port_def);
 
 enum
 {
@@ -1352,7 +1354,9 @@ gst_omx_video_dec_reconfigure_output_port (GstOMXVideoDec * self)
   GstVideoCodecState *state;
   OMX_PARAM_PORTDEFINITIONTYPE port_def;
   GstVideoFormat format;
+  OMX_CONFIG_RECTTYPE rect;
 
+  GST_OMX_INIT_STRUCT (&rect);
   /* At this point the decoder output port is disabled */
 
 #if defined (HAVE_GST_GL)
@@ -1376,10 +1380,11 @@ gst_omx_video_dec_reconfigure_output_port (GstOMXVideoDec * self)
       self->eglimage = TRUE;
 
       gst_omx_port_get_port_definition (self->dec_out_port, &port_def);
+      gst_omx_video_dec_get_recttype (self, &rect, &port_def);
       GST_VIDEO_DECODER_STREAM_LOCK (self);
       state = gst_video_decoder_set_output_state (GST_VIDEO_DECODER (self),
-          GST_VIDEO_FORMAT_RGBA, port_def.format.video.nFrameWidth,
-          port_def.format.video.nFrameHeight, self->input_state);
+          GST_VIDEO_FORMAT_RGBA, rect.nWidth,
+          rect.nHeight, self->input_state);
 
       /* at this point state->caps is NULL */
       if (state->caps)
@@ -1573,16 +1578,18 @@ gst_omx_video_dec_reconfigure_output_port (GstOMXVideoDec * self)
     goto done;
   }
 
+  gst_omx_video_dec_get_recttype (self, &rect, &port_def);
+
   GST_DEBUG_OBJECT (self,
       "Setting output state: format %s (%d), width %u, height %u",
       gst_video_format_to_string (format),
       port_def.format.video.eColorFormat,
-      (guint) port_def.format.video.nFrameWidth,
-      (guint) port_def.format.video.nFrameHeight);
+      (guint) rect.nWidth,
+      (guint) rect.nHeight);
 
   state = gst_video_decoder_set_output_state (GST_VIDEO_DECODER (self),
-      format, port_def.format.video.nFrameWidth,
-      port_def.format.video.nFrameHeight, self->input_state);
+      format, rect.nWidth,
+      rect.nHeight, self->input_state);
 
   if (!gst_video_decoder_negotiate (GST_VIDEO_DECODER (self))) {
     gst_video_codec_state_unref (state);
@@ -1738,7 +1745,8 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
   }
 
   if (!gst_pad_has_current_caps (GST_VIDEO_DECODER_SRC_PAD (self)) ||
-      acq_return == GST_OMX_ACQUIRE_BUFFER_RECONFIGURE) {
+      acq_return == GST_OMX_ACQUIRE_BUFFER_RECONFIGURE ||
+	  acq_return == GST_OMX_ACQUIRE_BUFFER_RECT_CHANGED) {
     GstVideoCodecState *state;
     OMX_PARAM_PORTDEFINITIONTYPE port_def;
     GstVideoFormat format;
@@ -1770,6 +1778,8 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
       if (err != OMX_ErrorNone)
         goto reconfigure_error;
     } else {
+      OMX_CONFIG_RECTTYPE rect;
+      GST_OMX_INIT_STRUCT (&rect);
       /* Just update caps */
       GST_VIDEO_DECODER_STREAM_LOCK (self);
 
@@ -1790,16 +1800,18 @@ gst_omx_video_dec_loop (GstOMXVideoDec * self)
         goto caps_failed;
       }
 
+      //check the rectangle info
+      gst_omx_video_dec_get_recttype (self, &rect, &port_def);
       GST_DEBUG_OBJECT (self,
           "Setting output state: format %s (%d), width %u, height %u",
           gst_video_format_to_string (format),
           port_def.format.video.eColorFormat,
-          (guint) port_def.format.video.nFrameWidth,
-          (guint) port_def.format.video.nFrameHeight);
+          (guint) rect.nWidth,
+          (guint) rect.nHeight);
 
       state = gst_video_decoder_set_output_state (GST_VIDEO_DECODER (self),
-          format, port_def.format.video.nFrameWidth,
-          port_def.format.video.nFrameHeight, self->input_state);
+          format, rect.nWidth,
+          rect.nHeight, self->input_state);
 
       /* Take framerate and pixel-aspect-ratio from sinkpad caps */
 
@@ -3501,3 +3513,22 @@ gst_omx_video_dec_propose_allocation (GstVideoDecoder * bdec, GstQuery * query)
       GST_VIDEO_DECODER_CLASS
       (gst_omx_video_dec_parent_class)->propose_allocation (bdec, query);
 }
+
+static void
+gst_omx_video_dec_get_recttype (GstOMXVideoDec * self,
+    OMX_CONFIG_RECTTYPE *rect,
+    OMX_PARAM_PORTDEFINITIONTYPE *port_def)
+{
+  GstOMXPort *port = self->dec_out_port;
+
+  if (OMX_ErrorNone != gst_omx_component_get_config (port->comp,
+       OMX_IndexConfigCommonOutputCrop, rect)) {
+    rect->nLeft = 0;
+    rect->nTop = 0;
+    rect->nWidth = port_def->format.video.nFrameWidth;
+    rect->nHeight = port_def->format.video.nFrameHeight;
+  } else
+    GST_DEBUG_OBJECT (self,
+        "got rectangles info: left %d, top %d, width %u, height %u",
+        rect->nLeft, rect->nTop, rect->nWidth, rect->nHeight);
+}
-- 
2.7.4

