From 9551dd00b1037640330c70dbcdce2b9496c0ef81 Mon Sep 17 00:00:00 2001
From: Wanteng Zhang <wantzhan@codeaurora.org>
Date: Thu, 20 Aug 2020 17:34:59 +0800
Subject: [PATCH] [DRM front-end] display DRM front-end

Add a display DRM front-end software for the new architecture
---
 Makefile.am          | 11 +++++++-
 Makefile.sources     |  4 +--
 configure.ac         | 17 +++++++++++
 include/drm/fe_drm.h | 48 +++++++++++++++++++++++++++++++
 meson.build          | 18 ++++++++++--
 meson_options.txt    |  6 ++++
 xf86drm.c            | 80 ++++++++++++++++++++++++++++++++++++++++++++++++++--
 7 files changed, 176 insertions(+), 8 deletions(-)
 mode change 100644 => 100755 Makefile.am
 mode change 100644 => 100755 Makefile.sources
 mode change 100644 => 100755 configure.ac
 create mode 100755 include/drm/fe_drm.h
 mode change 100644 => 100755 meson.build
 mode change 100644 => 100755 meson_options.txt
 mode change 100644 => 100755 xf86drm.c

diff --git a/Makefile.am b/Makefile.am
old mode 100644
new mode 100755
index 730de1f..b3c2bfd
--- a/Makefile.am
+++ b/Makefile.am
@@ -41,7 +41,8 @@ AM_DISTCHECK_CONFIGURE_FLAGS = \
 	--enable-install-test-programs \
 	--enable-cairo-tests \
 	--enable-manpages \
-	--enable-valgrind
+	--enable-valgrind \
+	--enable-drm_fe
 
 pkgconfigdir = @pkgconfigdir@
 pkgconfig_DATA = libdrm.pc
@@ -117,12 +118,20 @@ libdrm_la_LTLIBRARIES = libdrm.la
 libdrm_ladir = $(libdir)
 libdrm_la_LDFLAGS = -version-number 2:4:0 -no-undefined
 libdrm_la_LIBADD = @CLOCK_LIB@ -lm
+if HAVE_DRM_FE
+libdrm_la_LIBADD += @DLOPEN_LIBS@
+endif
 
 libdrm_la_CPPFLAGS = -I$(top_srcdir)/include/drm
 AM_CFLAGS = \
 	$(WARN_CFLAGS) \
 	-fvisibility=hidden \
 	$(VALGRIND_CFLAGS)
+if HAVE_DRM_FE
+AM_CFLAGS += \
+        -DLIBDIR='"$(libdir)"' \
+        -DDRM_FE
+endif
 
 libdrm_la_SOURCES = $(LIBDRM_FILES)
 
diff --git a/Makefile.sources b/Makefile.sources
old mode 100644
new mode 100755
index 55290fe..70d8a88
--- a/Makefile.sources
+++ b/Makefile.sources
@@ -8,14 +8,14 @@ LIBDRM_FILES := \
 	xf86drmMode.c \
 	xf86atomic.h \
 	libdrm_macros.h \
-	libdrm_lists.h \
 	util_double_list.h \
 	util_math.h
 
 LIBDRM_H_FILES := \
 	libsync.h \
 	xf86drm.h \
-	xf86drmMode.h
+	xf86drmMode.h \
+	libdrm_lists.h
 
 LIBDRM_INCLUDE_H_FILES := \
 	include/drm/drm.h \
diff --git a/configure.ac b/configure.ac
old mode 100644
new mode 100755
index 955dbad..ad802cd
--- a/configure.ac
+++ b/configure.ac
@@ -163,6 +163,11 @@ AC_ARG_ENABLE(install-test-programs,
 		  [Install test programs (default: no)]),
 		  [INSTALL_TESTS=$enableval], [INSTALL_TESTS=no])
 
+AC_ARG_ENABLE(drm_fe,
+	      AS_HELP_STRING([--enable-drm_fe],
+	      [Enable support for the DRM front-end (default: disabled)]),
+	      [DRM_FE=$enableval], [DRM_FE=auto])
+
 dnl ===========================================================================
 dnl check compiler flags
 AC_DEFUN([LIBDRM_CC_TRY_FLAG], [
@@ -189,6 +194,10 @@ AC_CHECK_FUNCS([clock_gettime], [CLOCK_LIB=],
                              [AC_MSG_ERROR([Couldn't find clock_gettime])])])
 AC_SUBST([CLOCK_LIB])
 
+AC_CHECK_FUNC([dlopen], [],
+              AC_CHECK_LIB([dl], [dlopen], DLOPEN_LIBS="-ldl"))
+AC_SUBST(DLOPEN_LIBS)
+
 AC_CHECK_FUNCS([open_memstream],
                [AC_DEFINE([HAVE_OPEN_MEMSTREAM], 1, [Have open_memstream()])],
                [AC_DEFINE([HAVE_OPEN_MEMSTREAM], 0)])
@@ -459,6 +468,13 @@ AM_CONDITIONAL(HAVE_ETNAVIV, [test "x$ETNAVIV" = xyes])
 
 AM_CONDITIONAL(HAVE_INSTALL_TESTS, [test "x$INSTALL_TESTS" = xyes])
 
+AM_CONDITIONAL(HAVE_DRM_FE, [test "x$DRM_FE" = xyes])
+if test "x$DRM_FE" = xyes; then
+        AC_DEFINE(HAVE_DRM_FE, 1, [Have DRM front-end support])
+else
+	echo "DRM FE is not enabled"
+fi
+
 AC_ARG_ENABLE([cairo-tests],
               [AS_HELP_STRING([--enable-cairo-tests],
                               [Enable support for Cairo rendering in tests (default: auto)])],
@@ -602,4 +618,5 @@ echo "  Freedreno API  $FREEDRENO (kgsl: $FREEDRENO_KGSL)"
 echo "  Tegra API      $TEGRA"
 echo "  VC4 API        $VC4"
 echo "  Etnaviv API    $ETNAVIV"
+echo "  drm_fe API     $DRM_FE"
 echo ""
diff --git a/include/drm/fe_drm.h b/include/drm/fe_drm.h
new file mode 100755
index 0000000..32bb84a
--- /dev/null
+++ b/include/drm/fe_drm.h
@@ -0,0 +1,48 @@
+/*
+* Copyright (c) 2017, The Linux Foundation. All rights reserved.
+*
+* Redistribution and use in source and binary forms, with or without
+* modification, are permitted provided that the following conditions are
+* met:
+* 	* Redistributions of source code must retain the above copyright
+* 	  notice, this list of conditions and the following disclaimer.
+* 	* Redistributions in binary form must reproduce the above
+* 	  copyright notice, this list of conditions and the following
+* 	  disclaimer in the documentation and/or other materials provided
+* 	  with the distribution.
+* 	* Neither the name of The Linux Foundation nor the names of its
+* 	  contributors may be used to endorse or promote products derived
+* 	  from this software without specific prior written permission.
+*
+* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESS OR IMPLIED
+* WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
+* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT
+* ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS
+* BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+* CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
+* BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
+* WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
+* OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
+* IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+*/
+
+#ifndef _LIBDRM_API_FE_H_
+#define _LIBDRM_API_FE_H_
+
+#if defined(__cplusplus) || defined(c_plusplus)
+extern "C" {
+#endif
+
+struct drm_interface_fe {
+	int (*drmioctl_fe)(int fd, unsigned long request, void *arg);
+	int (*drmclose_fe)(int fd);
+	int (*drmopen_fe)(int minor, int type);
+};
+
+#if defined(__cplusplus) || defined(c_plusplus)
+}
+#endif
+
+#endif
+
diff --git a/meson.build b/meson.build
old mode 100644
new mode 100755
index fc02f55..55eac2d
--- a/meson.build
+++ b/meson.build
@@ -157,6 +157,19 @@ if _vc4 != 'false'
   with_vc4 = _vc4 == 'true' or ['arm', 'aarch64'].contains(host_machine.cpu_family())
 endif
 
+with_drm_fe = false
+dep_dl = cc.find_library('dl')
+_drm_fe = get_option('enable_drm-fe')
+if _drm_fe == 'yes'
+  with_drm_fe = true
+  config.set('HAVE_DRM_FE', 1)
+  add_project_arguments('-DDRM_FE', language : 'c')
+  add_project_arguments('-DLIBDIR='+'"/usr/lib"', language : 'c')
+  fedep_dl = cc.find_library('dl')
+else
+  fedep_dl = []
+endif
+
 # XXX: Apparently only freebsd and dragonfly bsd actually need this (and
 # gnu/kfreebsd), not openbsd and netbsd
 with_libkms = false
@@ -295,7 +308,7 @@ libdrm = shared_library(
    config_file,
   ],
   c_args : libdrm_c_args,
-  dependencies : [dep_valgrind, dep_rt, dep_m],
+  dependencies : [dep_valgrind, dep_rt, dep_m, fedep_dl],
   include_directories : inc_drm,
   version : '2.4.0',
   install : true,
@@ -306,7 +319,7 @@ ext_libdrm = declare_dependency(
   include_directories : [inc_root, inc_drm],
 )
 
-install_headers('libsync.h', 'xf86drm.h', 'xf86drmMode.h')
+install_headers('libsync.h', 'xf86drm.h', 'xf86drmMode.h', 'libdrm_lists.h')
 install_headers(
   'include/drm/drm.h', 'include/drm/drm_fourcc.h', 'include/drm/drm_mode.h',
   'include/drm/drm_sarea.h', 'include/drm/i915_drm.h',
@@ -388,4 +401,5 @@ message('  Freedreno API  @0@ (kgsl: @1@)'.format(with_freedreno, with_freedreno
 message('  Tegra API      @0@'.format(with_tegra))
 message('  VC4 API        @0@'.format(with_vc4))
 message('  Etnaviv API    @0@'.format(with_etnaviv))
+message('  DRM FE API     @0@'.format(with_drm_fe))
 message('')
diff --git a/meson_options.txt b/meson_options.txt
old mode 100644
new mode 100755
index 8af33f1..ba58b15
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -141,3 +141,9 @@ option(
   value : false,
   description : 'Enable support for using udev instead of mknod.',
 )
+option(
+  'enable_drm-fe',
+  type: 'string',
+  value: '',
+  description : 'Have DRM front-end support',
+)
diff --git a/xf86drm.c b/xf86drm.c
old mode 100644
new mode 100755
index b7d5865..6c5abf3
--- a/xf86drm.c
+++ b/xf86drm.c
@@ -68,6 +68,10 @@
 
 #include "xf86drm.h"
 #include "libdrm_macros.h"
+#ifdef DRM_FE
+#include "fe_drm.h"
+#include "dlfcn.h"
+#endif
 
 #include "util_math.h"
 
@@ -167,7 +171,49 @@ drm_public void drmFree(void *pt)
 {
     free(pt);
 }
+#ifdef DRM_FE
+void * load_drm_fe_module(const char *name, const char *entrypoint)
+{
+	char path[1024];
+	void *module, *interface;
+
+	if (name == NULL)
+		return NULL;
+
+	snprintf(path, sizeof path, "%s/%s", LIBDIR, name);
+
+	module = dlopen(path, RTLD_NOW);
+	if (!module) {
+		printf("Failed to load module: %s\n", dlerror());
+		return NULL;
+	}
+
+	interface = dlsym(module, entrypoint);
+	if (!interface) {
+		printf("Failed to lookup interface: %s\n", dlerror());
+		dlclose(module);
+		return NULL;
+	}
+
+	return interface;
+}
+
+struct drm_interface_fe *drm_interface_fe = NULL;
+
+void *get_drm_fe(void)
+{
+	if (!drm_interface_fe) {
+		drm_interface_fe =
+			load_drm_fe_module(
+				"lib_drm_fe.so",
+				"drm_interface_fe");
+		if (!drm_interface_fe)
+			printf("GK - load drm_fe failed!\n");
+	}
 
+	return drm_interface_fe;
+}
+#endif
 /**
  * Call ioctl, restarting if it is interrupted
  */
@@ -175,9 +221,19 @@ drm_public int
 drmIoctl(int fd, unsigned long request, void *arg)
 {
     int ret;
-
+#ifdef DRM_FE
+    struct drm_interface_fe *drm_intf_fe;
+    drm_intf_fe = get_drm_fe();
+    if (!drm_intf_fe) {
+        return -EINVAL;
+    }
+#endif
     do {
+#ifdef DRM_FE
+        ret = drm_intf_fe->drmioctl_fe(fd, request, arg);
+#else
         ret = ioctl(fd, request, arg);
+#endif
     } while (ret == -1 && (errno == EINTR || errno == EAGAIN));
     return ret;
 }
@@ -340,6 +396,14 @@ static int drmOpenDevice(dev_t dev, int minor, int type)
     gid_t           group   = DRM_DEV_GID;
 #endif
 
+#ifdef DRM_FE
+	struct drm_interface_fe *drm_intf_fe = get_drm_fe();
+	if (!drm_intf_fe)
+		return -EINVAL;
+	if((fd = drm_intf_fe->drmopen_fe(minor, type)) >= 0)
+		return fd;
+#endif
+
     if (!dev_name)
         return -EINVAL;
 
@@ -1219,7 +1283,9 @@ drm_public int drmClose(int fd)
 {
     unsigned long key    = drmGetKeyFromFd(fd);
     drmHashEntry  *entry = drmGetEntry(fd);
-
+#ifdef DRM_FE
+    struct drm_interface_fe *drm_intf_fe;
+#endif
     drmHashDestroy(entry->tagTable);
     entry->fd       = 0;
     entry->f        = NULL;
@@ -1227,7 +1293,11 @@ drm_public int drmClose(int fd)
 
     drmHashDelete(drmHashTable, key);
     drmFree(entry);
-
+#ifdef DRM_FE
+    drm_intf_fe = get_drm_fe();
+    if (drm_intf_fe)
+        drm_intf_fe->drmclose_fe(fd);
+#endif
     return close(fd);
 }
 
@@ -2143,7 +2213,11 @@ drm_public int drmWaitVBlank(int fd, drmVBlankPtr vbl)
     timeout.tv_sec++;
 
     do {
+#ifdef DRM_FE
+       ret = drmIoctl(fd, DRM_IOCTL_WAIT_VBLANK, vbl);
+#else
        ret = ioctl(fd, DRM_IOCTL_WAIT_VBLANK, vbl);
+#endif
        vbl->request.type &= ~DRM_VBLANK_RELATIVE;
        if (ret && errno == EINTR) {
            clock_gettime(CLOCK_MONOTONIC, &cur);
-- 
2.7.4

