From b815e04efdc1d285dc0494f2c3aa3e44b212a645 Mon Sep 17 00:00:00 2001
From: Lei wang <leiwan@codeaurora.org>
Date: Wed, 1 Jan 2020 18:47:56 +0800
Subject: [PATCH] systemd: add userspace marker support

put debugfs mount earlier
support userspace entry and unit marker

Signed-off-by: Lei wang <leiwan@codeaurora.org>
---
 src/basic/util.h | 24 ++++++++++++++++++++++++
 src/core/job.c   | 29 +++++++++++++++++++++++++++++
 src/core/main.c  |  1 +
 3 files changed, 54 insertions(+)

diff --git a/src/basic/util.h b/src/basic/util.h
index c583923..90ee69b 100644
--- a/src/basic/util.h
+++ b/src/basic/util.h
@@ -22,6 +22,7 @@
 #include <sys/types.h>
 #include <time.h>
 #include <unistd.h>
+#include "mount-util.h"
 
 #include "format-util.h"
 #include "macro.h"
@@ -178,6 +179,29 @@ static inline unsigned log2u_round_up(unsigned x) {
         return log2u(x - 1) + 1;
 }
 
+#define KPI_VALUE_PATH "/sys/kernel/debug/bootkpi/kpi_values"
+
+static inline void write_marker(const char *label) {
+        int fd = -1;
+
+        if (access(KPI_VALUE_PATH, F_OK) < 0 && (mount_verbose(LOG_ERR,
+                                                               "debugfs",
+                                                               "/sys/kernel/debug",
+                                                               "debugfs",
+                                                               0,
+                                                               NULL) < 0))
+                return;
+        fd = open(KPI_VALUE_PATH, O_WRONLY);
+        if (fd > 0) {
+                write(fd, label, strlen(label));
+                close(fd);
+        } else {
+                log_error("open bootkpi_values failed");
+        }
+
+        return;
+}
+
 int container_get_leader(const char *machine, pid_t *pid);
 
 int namespace_open(pid_t pid, int *pidns_fd, int *mntns_fd, int *netns_fd, int *userns_fd, int *root_fd);
diff --git a/src/core/job.c b/src/core/job.c
index 8552ffb..7e249d8 100644
--- a/src/core/job.c
+++ b/src/core/job.c
@@ -25,6 +25,14 @@
 #include "unit.h"
 #include "virt.h"
 
+
+#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0][0]))
+
+static const char* bootkpi_unit_list[][3]= {
+        {"systemd-logind.service", "V - agl system session complete", "V - agl first user logged in"},
+};
+
+
 Job* job_new_raw(Unit *unit) {
         Job *j;
 
@@ -548,6 +556,16 @@ static int job_perform_on_unit(Job **j) {
                         assert_not_reached("Invalid job type");
         }
 
+        if (t == JOB_START && u->type == UNIT_SERVICE) {
+                for (size_t idx = 0; idx < (ARRAY_SIZE(bootkpi_unit_list) / 3); idx++) {
+                        if (strneq(u->id, bootkpi_unit_list[idx][0],
+                                   strlen(bootkpi_unit_list[idx][0])) &&
+                                   bootkpi_unit_list[idx][1]) {
+                                write_marker(bootkpi_unit_list[idx][1]);
+                        }
+                }
+        }
+
         /* Log if the job still exists and the start/stop/reload function
          * actually did something. */
         *j = manager_get_job(m, id);
@@ -888,6 +906,17 @@ int job_finish_and_invalidate(Job *j, JobResult result, bool recursive, bool alr
 
         log_unit_debug(u, "Job %s/%s finished, result=%s", u->id, job_type_to_string(t), job_result_to_string(result));
 
+        if (result == JOB_DONE && u->type == UNIT_SERVICE) {
+                for (size_t idx = 0; idx < (ARRAY_SIZE(bootkpi_unit_list) / 3); idx++) {
+                        if (strneq(u->id, bootkpi_unit_list[idx][0],
+                                   strlen(bootkpi_unit_list[idx][0])) &&
+                                   bootkpi_unit_list[idx][2]) {
+                                write_marker(bootkpi_unit_list[idx][2]);
+                        }
+                }
+        }
+
+
         /* If this job did nothing to respective unit we don't log the status message */
         if (!already)
                 job_emit_status_message(u, t, result);
diff --git a/src/core/main.c b/src/core/main.c
index 44dd834..7c3331b 100644
--- a/src/core/main.c
+++ b/src/core/main.c
@@ -2214,6 +2214,7 @@ int main(int argc, char *argv[]) {
                                         error_message = "Failed to mount early API filesystems";
                                         goto finish;
                                 }
+                                write_marker("M - User Space Start");
 
                                 r = initialize_security(
                                                 &loaded_policy,
-- 
2.7.4

